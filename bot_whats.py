import openai
import requests
import cloudinary
import cloudinary.uploader
from flask import Flask, request
from twilio.rest import Client
from twilio.twiml.messaging_response import MessagingResponse
import os
# from dotenv import load_dotenv

# ===== CARGAR VARIABLES DE ENTORNO =====
# load_dotenv()

# ===== CONFIGURACI√ìN DE CLAVES =====
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
ELEVEN_API_KEY = os.environ.get("ELEVEN_API_KEY")
VOICE_ID = os.environ.get("VOICE_ID", "21m00Tcm4TlvDq8ikWAM")

TWILIO_ACCOUNT_SID = os.environ.get("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.environ.get("TWILIO_AUTH_TOKEN")
TWILIO_WHATSAPP_NUMBER = os.environ.get("TWILIO_WHATSAPP_NUMBER")

# ===== CONFIGURACI√ìN CLOUDINARY =====
cloudinary.config(
    cloud_name=os.environ.get("CLOUDINARY_CLOUD_NAME"),
    api_key=os.environ.get("CLOUDINARY_API_KEY"),
    api_secret=os.environ.get("CLOUDINARY_API_SECRET")
)

# ===== CLIENTES =====
openai.api_key = OPENAI_API_KEY
twilio_client = Client(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)

# ===== PROMPT DE LA IA =====
PROMPT = """
Eres COINSA Asistente, tu socio financiero digital de Cr√©dito Operativo Integral, SA de CV, SOFOM ENR, con m√°s de 10 a√±os de experiencia en el ramo financiero, radicados en Nuevo Le√≥n. 
Proporciona informaci√≥n concisa y precisa sobre nuestros productos crediticios para ofrecer la mejor soluci√≥n a los compromisos econ√≥micos.
Tasas competitivas: la tasa es el costo del financiamiento durante el plazo pactado y utilizamos tasas sobre saldos, de modo que al abonar capital, los intereses disminuyen.
Cr√©ditos flexibles: ofrecemos esquemas de pago amortizable (capital m√°s inter√©s mes a mes) o pago flexible (l√≠nea de cr√©dito con intereses seg√∫n capital dispuesto).
Pagos fijos o flexibles: adapta el esquema a los flujos; por ejemplo, pago amortizable para maquinaria o l√≠nea de cr√©dito revolvente para capital de trabajo.
Tiempo de respuesta r√°pido: garantizamos respuestas √°giles para evitar urgencias y costos innecesarios.
¬øConviene un cr√©dito? Eval√∫a si los recursos multiplicados cubrir√°n el costo financiero o liquidar√°n pasivos costosos, proyectando flujos netos mayores al pago mensual.
Invierte para crecer, optimizar procesos, aumentar inventario, remodelar, liquidar deudas o adquirir el veh√≠culo deseado.
Ejemplos de productos: Propiedad Mina NL y Terreno Mina NL. 
Contacto: 812 612 3414, info@fcoinsa.com.mx. 
Act√∫a con profesionalismo y brevedad en cada interacci√≥n, utilizando m√°ximo 45 palabras y limit√°ndote a responder lo que pregunte el usuario.
"""

# ===== FLASK APP =====
app = Flask(__name__)

@app.route("/whatsapp", methods=["POST"])
def whatsapp_bot():
    user_message = request.form.get("Body")
    from_number = request.form.get("From")

    print(f"‚úÖ Recibido mensaje de {from_number}: {user_message}")

    try:
        response = openai.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": PROMPT},
                {"role": "user", "content": user_message}
            ]
        )
        respuesta_texto = response.choices[0].message.content
        print(f"‚úÖ Respuesta de OpenAI: {respuesta_texto}")

    except Exception as e:
        print(f"‚ùå Error en OpenAI: {e}")
        respuesta_texto = "Lo siento, ocurri√≥ un error al procesar tu mensaje."

    audio_file = elevenlabs_tts(respuesta_texto)

    if audio_file:
        audio_url = subir_a_cloudinary(audio_file)
    else:
        audio_url = None

    if audio_url:
        try:
            message = twilio_client.messages.create(
                from_=TWILIO_WHATSAPP_NUMBER,
                to=from_number,
                media_url=[audio_url]
            )
            print(f"‚úÖ Audio enviado a {from_number}: {audio_url}")
        except Exception as e:
            print(f"‚ùå Error enviando audio: {e}")
    else:
        print("‚ö†Ô∏è No se pudo generar el audio. Enviando mensaje de texto.")
        resp = MessagingResponse()
        resp.message(respuesta_texto)
        return str(resp)

    return "OK", 200

def elevenlabs_tts(texto):
    url = f"https://api.elevenlabs.io/v1/text-to-speech/{VOICE_ID}"
    headers = {
        "xi-api-key": ELEVEN_API_KEY,
        "Content-Type": "application/json"
    }
    payload = {
        "text": texto,
        "model_id": "eleven_multilingual_v1",
        "voice_settings": {
            "stability": 0.5,
            "similarity_boost": 0.75
        }
    }

    print("üéôÔ∏è Generando audio en Eleven Labs...")
    response = requests.post(url, json=payload, headers=headers)

    if response.status_code == 200:
        file_name = "respuesta.mp3"
        with open(file_name, "wb") as f:
            f.write(response.content)

        print("‚úÖ Audio guardado como respuesta.mp3")
        return file_name
    else:
        print(f"‚ùå Error en Eleven Labs: {response.status_code} - {response.text}")
        return None

def subir_a_cloudinary(file_path):
    print("‚òÅÔ∏è Subiendo audio a Cloudinary...")
    try:
        result = cloudinary.uploader.upload(file_path, resource_type="video")
        audio_url = result.get("secure_url")
        print(f"‚úÖ Audio subido a Cloudinary: {audio_url}")

        os.remove(file_path)
        print("üßπ Archivo local eliminado despu√©s de subir.")
        return audio_url
    except Exception as e:
        print(f"‚ùå Error al subir a Cloudinary: {e}")
        return None

if __name__ == "__main__":
    print("üöÄ Bot corriendo en http://localhost:5001/whatsapp")
    PORT = int(os.environ.get("PORT", 5001))
    app.run(host="0.0.0.0", port=PORT, debug=True)
